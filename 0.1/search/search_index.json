{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Geist documentation","text":"<p>Geist is a templating language to manipulate, query, and report data. At the moment, Geist supports RDF dataset. More types of datasets will be supported in the near future.</p> <p>The geist-p GitHub repository is the Python implementation of it. It can load various formats of files as RDF graph objects, and store them as PKL files together with the corresponding inference information. Each PKL file is a dataset stored under the <code>.geistdata</code> folder, where the filename is consistent with the <code>--dataset</code> field. Thanks to RDFLib, Geist can create, load, destroy, export, visualize, and query a dataset. Furthermore, Jinja2 makes it possible to do nested queries and expand a report (i.e., a Geist template) using a dataset, which makes it easier to generate customized reusable interactive report, such as a HTML file.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>report</code> command: expand a report using a dataset</li> <li><code>create</code> command: create a new RDF dataset</li> <li><code>destroy</code> command: delete an RDF dataset</li> <li><code>export</code> command: export an RDF graph</li> <li><code>graph</code> command: visualize a dataset</li> <li><code>load</code> command: import data into an RDF dataset</li> <li><code>query</code> command: perform a SPARQL query on a dataset</li> </ul>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#v010","title":"v0.1.0","text":"<ul> <li>Add documentation</li> <li>Add the component tag to extract connected components of a given graph</li> <li>Add the process_str_for_html filter</li> <li>Make the map tag more flexible: make it possible to map selected columns</li> <li>Fix the quotes bug: keep the cell's original format</li> </ul>"},{"location":"changelog/#v001","title":"v0.0.1","text":"<ul> <li>The first version of GEIST with create, load, query, destroy, graph, graph2, map, use, html, img, and table tags</li> <li>SPARQL queries are supported by GEIST based on RDFLib</li> </ul>"},{"location":"setup/","title":"Setup","text":"<p>Geist will be available on PyPI. You should be able to install it via <code>pip install geist</code> in the near future.</p> <p>For now, the best way to get it is through GitHub: <pre><code>pip install geist-p@git+https://github.com/CIRSS/geist-p\n</code></pre></p> <p>To check Geist is working, run <code>geist</code> in the command line. You should get the following output: <pre><code>Usage: geist [OPTIONS] COMMAND [ARGS]...\n\nOptions:\n  --help  Show this message and exit.\n\nCommands:\n  create   Create a new RDF dataset\n  destroy  Delete an RDF dataset\n  export   Export an RDF graph\n  graph    Visualize an RDF dataset\n  load     Import data into an RDF dataset\n  query    Perform a SPARQL query on an RDF dataset\n  report   Expand a report using an RDF dataset\n</code></pre></p>"},{"location":"commands/create/","title":"Command create","text":"<p>create command can create a new RDF dataset. A PKL file will be created under the <code>.geistdata</code> folder with the same name of this dataset.</p> CLIGeist Template <p>Here are options of the create command: <pre><code>Usage: geist create [OPTIONS]\n\n    Create a new RDF dataset\n\nOptions:\n-d, --dataset TEXT              Name of RDF dataset to create (default \"kb\")\n-ifile, --inputfile FILENAME    Path of the file to be loaded as triples\n                                [required]\n-iformat, --inputformat [xml|n3|turtle|nt|pretty-xml|trix|trig|nquads|json-ld|hext|csv]\n                                Format of the file to be loaded as triples\n                                (default json-ld)\n--colnames TEXT                 Column names of triples with the format of\n                                [[subject1, predicate1, object1], [subject2,\n                                predicate2, object2], ...] when the input\n                                format is csv\n--infer [none|rdfs|owl|rdfs_owl]\n                                Inference to perform on update [none, rdfs,\n                                owl, rdfs_owl] (default \"none\")\n--help                          Show this message and exit.\n</code></pre></p> Example 1: create a <code>test</code> dataset from stdin <pre><code>geist create --dataset test --inputformat nt --infer none &lt;&lt; __END_INPUT__\n\n&lt;http://example.com/drewp&gt; &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://xmlns.com/foaf/0.1/Person&gt; .\n&lt;http://example.com/drewp&gt; &lt;http://example.com/says&gt; \"Hello World\" .\n\n__END_INPUT__\n</code></pre> Example 2: create a <code>test</code> dataset from a file <p>Here is the <code>test.nt</code> file:</p> <p><pre><code>&lt;http://example.com/drewp&gt; &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://xmlns.com/foaf/0.1/Person&gt; .\n&lt;http://example.com/drewp&gt; &lt;http://example.com/says&gt; \"Hello World\" .\n</code></pre> Code: <pre><code>geist create --dataset test --inputfile test.nt --inputformat nt --infer none\n</code></pre></p> <p>Check the create tag.</p>"},{"location":"commands/destroy/","title":"Command destroy","text":"<p>destroy command can delete an RDF dataset. The PKL file of the corresponding dataset will be discarded.</p> CLIGeist Template <p>Here are options of the destroy command: <pre><code>Usage: geist destroy [OPTIONS]\n\n    Delete an RDF dataset\n\nOptions:\n-d, --dataset TEXT  Name of RDF dataset to be removed (default \"kb\")\n-q, --quiet         Suppress error messages if the provided dataset does not\n                    exist\n--help              Show this message and exit.\n</code></pre></p> Example: delete the <code>test</code> dataset <pre><code>geist destroy --dataset test\n</code></pre> <p>The <code>.geistdata/test.pkl</code> file will be removed after this operation. By default, you will get an error message if the provided dataset (in this case, it is the <code>test</code> dataset) does not exist. To suppress this error message, you can add <code>--quiet</code>:</p> <pre><code>geist destroy --dataset test --quiet\n</code></pre> <p>Check the destroy tag.</p>"},{"location":"commands/export/","title":"Command export","text":"<p>export command can export an RDF dataset.</p> CLI <p>Here are options of the export command: <pre><code>Usage: geist export [OPTIONS]\n\n    Export an RDF graph\n\nOptions:\n-d, --dataset TEXT              Name of RDF dataset to be exported (default\n                                \"kb\")\n-oroot, --outputroot TEXT       Path of the directory to store these\n                                exported triples (default: current\n                                directory). If the given path (i.e.,\n                                --outputfile) is None or a relative path, it\n                                will be ignored.\n-ofile, --outputfile TEXT       Path of the file to store these exported\n                                triples (default: None)\n-oformat, --outputformat [json-ld|n3|nquads|nt|hext|pretty-xml|trig|trix|turtle|longturtle|xml]\n                                Format of the exported triples (default nt)\n--help                          Show this message and exit.\n</code></pre></p> Example: export the <code>test</code> dataset <p>By default, the exported triples will be printed in terminal: <pre><code>geist export --dataset test\n</code></pre></p>"},{"location":"commands/graph/","title":"Command graph","text":"<p>graph command can visualize an RDF dataset.</p> CLIGeist Template <p>Here are options of the graph command: <pre><code>Usage: geist graph [OPTIONS]\n\nVisualize a dataset\n\nOptions:\n-d, --dataset TEXT              Name of RDF dataset to be visualized\n                                (default \"kb\")\n-r, --rankdir [TB|BT|LR|RL]     Direction of the graph (default TB): TB or\n                                BT or LR or RL\n-m, --mappings TEXT             File of the mappings to shorten text (str):\n                                path of a JSON file, where the key is the\n                                original text and the value is the shorter\n                                text.\n-oroot, --outputroot TEXT       Path of the directory to store the graph\n                                (default: current directory). If the given\n                                path (i.e., --outputfile) is a relative\n                                path, it will be ignored.\n-ofile, --outputfile TEXT       Path of the file without extension to store\n                                the graph (default: res)\n-oformat, --outputformat [none|svg|png|gv]\n                                Format of the graph (default: none): none or\n                                svg or png or gv\n--help                          Show this message and exit.\n</code></pre></p> Example: visualize the <code>test</code> dataset <pre><code>geist graph --dataset test --outputformat svg \n</code></pre> <p>Check the graph tag.</p>"},{"location":"commands/load/","title":"Command load","text":"<p>load command can import data into an existing RDF dataset.</p> CLIGeist Template <p>Here are options of the load command: <pre><code>Usage: geist load [OPTIONS]\n\nImport data into an RDF dataset\n\nOptions:\n-d, --dataset TEXT              Name of RDF dataset to create (default \"kb\")\n-ifile, --inputfile FILENAME    Path of the file to be loaded as triples\n                                [required]\n-iformat, --inputformat [xml|n3|turtle|nt|pretty-xml|trix|trig|nquads|json-ld|hext|csv]\n                                Format of the file to be loaded as triples\n                                (default json-ld)\n--colnames TEXT                 Column names of triples with the format of\n                                [[subject1, predicate1, object1], [subject2,\n                                predicate2, object2], ...] when the input\n                                format is csv\n--help                          Show this message and exit.\n</code></pre></p> Example: load a file into the <code>test</code> dataset <pre><code>geist load --dataset test --inputfile test_add.jsonld\n</code></pre> <p>Check the load tag.</p>"},{"location":"commands/query/","title":"Command query","text":"<p>query command can perform a SPARQL query on a dataset.</p> CLIGeist Template <p>Here are options of the query command: <pre><code>Usage: geist query [OPTIONS]\n\nPerform a SPARQL query on a dataset\n\nOptions:\n-d, --dataset TEXT         Name of RDF dataset to be queried (default \"kb\")\n--file FILENAME            Path of the file containing the SPARQL query to\n                            execute  [required]\n-oroot, --outputroot TEXT  Path of the directory to store the query results\n                            (default: current directory). If the given path\n                            (i.e., --outputfile) is None or a relative path,\n                            it will be ignored.\n-ofile, --outputfile TEXT  Path of the file to store the query results\n                            (default: None)\n--help                     Show this message and exit.\n</code></pre></p> Example 1: all triples of the <code>test</code> dataset from stdin <pre><code>geist query &lt;&lt; __END_QUERY__\n\nSELECT ?s ?p ?o\nWHERE {\n    ?s ?p ?o\n}\nORDER BY ?s ?p ?o\n\n__END_QUERY__\n</code></pre> Example 2: all triples of the <code>test</code> dataset from a query file <pre><code>geist query --file query_file\n</code></pre> <p>Here is the query_file's content: <pre><code>SELECT ?s ?p ?o\nWHERE {\n    ?s ?p ?o\n}\nORDER BY ?s ?p ?o\n</code></pre></p> <p>Check the query tag.</p>"},{"location":"commands/report/introduction/","title":"Report Command Introduction","text":"<p>report command can expand a report (Geist template) using a dataset.</p>"},{"location":"commands/report/introduction/#what-is-a-geist-template","title":"What is a Geist template?","text":"<p>A Geist template is a text file without a specific extension requirement although adding a <code>.geist</code> extension is recommended. It is an extension of a Jinja template, therefore it follows the default Jinja delimiters:</p> <ul> <li><code>{% ... %}</code> for Statements</li> <li><code>{{ ... }}</code> for Expressions to print to the template output</li> <li><code>{# ... #}</code> for Comments not included in the template output</li> </ul>"},{"location":"commands/report/introduction/#how-to-write-a-geist-template","title":"How to write a Geist template?","text":"<p>A Geist template relies on tags and filters.</p>"},{"location":"commands/report/introduction/#tags","title":"Tags","text":"<p>Tags are used within the statements, i.e., <code>{% ... %}</code>. There are two types of tags, <code>StandaloneTag</code> and <code>ContainerTag</code>. While the <code>StandaloneTag</code> does not require a closing tag, the <code>ContainerTag</code> does. Besides the Jinja predefined tags (e.g., <code>for</code>), Geist supports the following tags:</p> <p><code>StandaloneTag</code>:</p> <ul> <li>destroy</li> <li>graph</li> <li>graph2</li> <li>use</li> </ul> <p><code>ContainerTag</code>:</p> <ul> <li>create</li> <li>load</li> <li>query</li> <li>component</li> <li>map</li> <li>html</li> <li>img</li> <li>table</li> </ul> <p>Custom tags can be defined through files with the use tag.</p>"},{"location":"commands/report/introduction/#filters","title":"Filters","text":"<p>Filters are used to modify variables. Each filter can only take one variable as input. Multiple filters can be applied to a single variable in sequence. For example, <code>{{ var|filter1|filter2|filter3 }}</code> denotes the variable <code>var</code> will be processed through <code>filter1</code> first, then <code>filter2</code>, and <code>filter3</code> at the end.</p> <p>Geist supports the following filters:</p> <ul> <li>json2df: convert a JSON string to a Pandas data frame</li> <li>json2dict: convert a JSON string to a dictionary</li> <li>df2htmltable: convert a Pandas data frame to an HTML table</li> <li>escape_quotes: escape both double and single quotation marks</li> <li>process_str_for_html: preprocess a string to be displayed within an HTML document, e.g., replace <code>&lt;</code> with <code>&amp;lt</code></li> </ul>"},{"location":"commands/report/introduction/#how-to-execute-expand-a-geist-template","title":"How to execute (expand) a Geist template?","text":"CLI <p>Here are options of the report command: <pre><code>Usage: geist report [OPTIONS]\n\nExpand a report using a dataset\n\nOptions:\n-f, --file FILENAME            Path of the file containing the report\n                                template to expand  [required]\n-oroot, --outputroot TEXT      Path of the directory to store the expanded\n                                report (default: current directory)\n-so, --suppressoutput BOOLEAN  Suppress output or not (default: False)\n--help                         Show this message and exit.\n</code></pre></p> Example 1: expand a report from stdin <pre><code>geist report &lt;&lt; END_TEMPLATE\n\n{% create inputformat=\"nt\", isfilepath=False %}\n    &lt;http://example.com/drewp&gt; &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://xmlns.com/foaf/0.1/Person&gt; .\n    &lt;http://example.com/drewp&gt; &lt;http://example.com/says&gt; \"Hello World\" .\n{% endcreate %}\n\n{% query isfilepath=False as res %}\n    SELECT ?s ?p ?o\n    WHERE {\n        ?s ?p ?o\n    }\n    ORDER BY ?s ?p ?o\n{% endquery %}\n{% set all_triples = res | json2df %}\n\n{% for _, row in all_triples.iterrows() %}\n    Subject: {{ row[\"s\"] }}, Predicate: {{ row[\"p\"] }}, Object: {{ row[\"o\"] }}.\n{% endfor %}\n\n{% destroy %}\n\nEND_TEMPLATE\n</code></pre> Example 2: expand a report from file <pre><code>geist report --file report.geist\n</code></pre> <p>Here is the report.geist file: <pre><code>{% create inputformat=\"nt\", isfilepath=False %}\n    &lt;http://example.com/drewp&gt; &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://xmlns.com/foaf/0.1/Person&gt; .\n    &lt;http://example.com/drewp&gt; &lt;http://example.com/says&gt; \"Hello World\" .\n{% endcreate %}\n\n{% query isfilepath=False as res %}\n    SELECT ?s ?p ?o\n    WHERE {\n        ?s ?p ?o\n    }\n    ORDER BY ?s ?p ?o\n{% endquery %}\n{% set all_triples = res | json2df %}\n\n{% for _, row in all_triples.iterrows() %}\n    Subject: {{ row[\"s\"] }}, Predicate: {{ row[\"p\"] }}, Object: {{ row[\"o\"] }}.\n{% endfor %}\n\n{% destroy %}\n</code></pre></p>"},{"location":"commands/report/tags/tag-component/","title":"Tag component","text":"<p>The <code>component</code> tag finds connected components in a graph. It will return a dict where the key is the index of a component (e.g., 0, 1, 2, ...) and the value is a connected component. By default, the given string is a file path. However, it can be updated by setting the <code>isfilepath</code> field to False. Here are parameters of the <code>component</code> tag:</p> Name Description <code>isfilepath</code> A bool value to denote if the given data is a file path or not (by default: True, which denotes the given data is a file path) <code>edges</code> A list of list. [[start_node1, end_node1], [start_node2, end_node2], ...] or [[start_node1, end_node1, label1], [start_node2, end_node2, label2], ...] where these items are column names"},{"location":"commands/report/tags/tag-create/","title":"Tag create","text":"<p>The <code>create</code> tag creates a dataset based on the given string. By default, the given string is a file path. However, it can be updated by setting the <code>isfilepath</code> field to False. Here are parameters of the <code>create</code> tag:</p> Name Description <code>dataset</code> Name of RDF dataset to create (by default, \"kb\") <code>inputformat</code> Format of the file to be loaded as triples (by default, \"json-ld\"). It has to be one of {\"xml\", \"n3\", \"turtle\", \"nt\", \"pretty-xml\", \"trix\", \"trig\", \"nquads\", \"json-ld\", \"hext\", \"csv\"} <code>colnames</code> Column names of triples with the format of [[subject1, predicate1, object1], [subject2, predicate2, object2], ...] when the input format is csv (by default, None) <code>infer</code> Inference to perform on update choosing from {\"none\", \"rdfs\", \"owl\", \"rdfs_owl\"} (by default, \"none\"). Please check OWL-RL document for detailed information. <code>isfilepath</code> A bool value to denote if the given data is a file path or not (by default: True, which denotes the given data is a file path) Example 1: the given string is not a file path <pre><code>{% create \"test\", inputformat=\"nt\", isfilepath=False %}\n    &lt;http://example.com/drewp&gt; &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://xmlns.com/foaf/0.1/Person&gt; .\n    &lt;http://example.com/drewp&gt; &lt;http://example.com/says&gt; \"Hello World\" .\n{% endcreate %}\n</code></pre> Example 2: the given string is a file path <p>Here is the <code>test.nt</code> file:</p> <pre><code>&lt;http://example.com/drewp&gt; &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://xmlns.com/foaf/0.1/Person&gt; .\n&lt;http://example.com/drewp&gt; &lt;http://example.com/says&gt; \"Hello World\" .\n</code></pre> <p>Code: <pre><code>{% create \"test\", inputformat=\"nt\", isfilepath=True %} test.nt {% endcreate %}\n</code></pre></p>"},{"location":"commands/report/tags/tag-destroy/","title":"Tag destroy","text":"<p>The <code>destroy</code> tag deletes a dataset. Here are parameters of the <code>destroy</code> tag:</p> Name Description <code>dataset</code> Name of RDF dataset to be removed (default \"kb\") <code>quiet</code> Suppress error messages if the provided dataset does not exist Example: delete the <code>test</code> dataset <p><pre><code>{% destroy dataset=\"test\" %}\n</code></pre> OR <pre><code>{% destroy \"test\" %}\n</code></pre></p> <p>The <code>.geistdata/test.pkl</code> file will be removed after this operation. By default, you will get an error message if the provided dataset (in this case, it is the <code>test</code> dataset) does not exist. To suppress this error message, you can add the <code>quiet</code> parameter:</p> <pre><code>{% destroy \"test\", quiet=True %}\n</code></pre>"},{"location":"commands/report/tags/tag-graph/","title":"Tag graph","text":"<p>The <code>graph</code> tag visualizes a dataset. Here are parameters of the <code>graph</code> tag:</p> Name Description <code>dataset</code> Name of RDF dataset to be visualized (default \"kb\") <code>rankdir</code> Direction of the graph (default TB): TB or BT or LR or RL <code>mappings</code> File of the mappings to shorten text (str): path of a JSON file, where the key is the original text and the value is the shorter text. <code>on</code> Column(s) to be mapped (default None, which means all columns will be mapped) Example: visualize the <code>test</code> dataset <pre><code>{% graph dataset=\"test\" %}\n</code></pre>"},{"location":"commands/report/tags/tag-graph2/","title":"Tag graph2","text":"<p>The <code>graph2</code> tag visualizes a dataset. It does not rely on the <code>PyGraphviz</code> pacakge, which makes it more flexible compared to the <code>graph</code> tag. Here are parameters of the <code>graph2</code> tag:</p> Name Description <code>dataset</code> Name of RDF dataset to be visualized (default \"kb\") <code>rankdir</code> Direction of the graph (default TB): TB or BT or LR or RL <code>mappings</code> File of the mappings to shorten text (str): path of a JSON file, where the key is the original text and the value is the shorter text. <code>on</code> Column(s) to be mapped (default None, which means all columns will be mapped) ... Graph attributes of Graphviz Example: visualize the <code>test</code> dataset <pre><code>{% graph2 dataset=\"test\" %}\n</code></pre>"},{"location":"commands/report/tags/tag-html/","title":"Tag html","text":"<p>The <code>html</code> tag formats and saves the string as a HTML file. Here is a parameter of the <code>html</code> tag:</p> Name Description <code>path</code> Path of the HTML file to be saved. By default, <code>report.html</code> Save the 'Hello World!' string as a file <pre><code>{% html %}Hello World!{% endhtml %}\n</code></pre> <p>Expected content of the <code>report.html</code> file:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\nHello World!\n&lt;/html&gt;\n</code></pre>"},{"location":"commands/report/tags/tag-img/","title":"Tag img","text":"<p>The <code>img</code> tag renders Graphviz code as an image and embeds it into HTML. Here are parameters of the <code>img</code> tag:</p> Name Description <code>src</code> Path of the rendered image to be saved. Various extensions are supported. Check PyGraphviz Docs for the whole list. Note: <code>dot</code> or <code>gv</code> will show code directly. ... Attributes of the HTML  or the HTML <code> tag Example 1: render as svg <pre><code>{% img src=\"test.svg\" %}digraph test_graph { node1 -&gt; node2 }{% endimg %}\n</code></pre> <p>A file named <code>test.svg</code> will be created and the Geist template will be updated as: <pre><code>&lt;img src=\"test.svg\" width=\"100%\" &gt;\n</code></pre></p> Example 2: render as gv <pre><code>{% img src=\"test.gv\" %}digraph test_graph { node1 -&gt; node2 }{% endimg %}\n</code></pre> <p>A file named <code>test.gv</code> will be created and the Geist template will be updated as: <pre><code>&lt;pre&gt;&lt;code&gt;digraph test_graph { node1 -&gt; node2 }&lt;/code&gt;&lt;/pre&gt;\n</code></pre></p>"},{"location":"commands/report/tags/tag-load/","title":"Tag load","text":"<p>The <code>load</code> tag imports data into a dataset. Here are parameters of the <code>load</code> tag:</p> Name Description <code>dataset</code> Name of RDF dataset to be removed (default \"kb\") <code>inputformat</code> Format of the file to be loaded as triples (default json-ld) <code>colnames</code> Column names of triples with the format of [[subject1, predicate1, object1], [subject2, predicate2, object2], ...] when the input format is csv <code>isfilepath</code> A bool value to denote if the given data is a file path or not (default True, which denotes the given data is a file path) Example: load a file into the <code>test</code> dataset <pre><code>{% load dataset=\"test\" %} test_add.jsonld {% endload %}\n</code></pre>"},{"location":"commands/report/tags/tag-map/","title":"Tag map","text":"<p>The <code>map</code> replaces the original text in a Pandas data frame on selected columns (if provides) with the shorter ones based on the given mappings. By default, the given string is a file path. However, it can be updated by setting the <code>isfilepath</code> field to False. Here are parameters of the <code>map</code> tag:</p> Name Description <code>isfilepath</code> A bool value to denote if the given data is a file path or not (by default: True, which denotes the given data is a file path) <code>mappings</code> File of the mappings to shorten text (str): path of a JSON file, where the key is the original text and the value is the shorter text. <code>on</code> A column or a list of selected columns. All columns will be selected by default (None) data.csv <pre><code>v1,v2,v3\ntest_a1,test_a2,test_a3\ntest_b1,test_b2,test_b3\n</code></pre> mapping.json <pre><code>{\"test_\": \"\"}\n</code></pre> Example 1: replace all columns <pre><code>{% map mappings=\"mappings.json\" %} data.csv {% endmap %}\n</code></pre> <p>Expected output: <pre><code>v1,v2,v3\na1,a2,a3\nb1,b2,b3\n</code></pre></p> Example 2: replace selected columns <pre><code>{% map mappings=\"mappings.json\" on=[\"v1\",\"v2\"] %} data.csv {% endmap %}\n</code></pre> <p>Expected output: <pre><code>v1,v2,v3\ntest_a1,test_a2,a3\ntest_b1,test_b2,b3\n</code></pre></p> <p>If only \"v1\" column need to be replaced, you can replace <code>on=[\"v1\",\"v2\"]</code> with <code>on=\"v1\"</code>.</p>"},{"location":"commands/report/tags/tag-query/","title":"Tag query","text":"<p>The <code>query</code> tag imports data into a dataset. Here are parameters of the <code>query</code> tag:</p> Name Description <code>dataset</code> Name of RDF dataset to be removed (default \"kb\") <code>isfilepath</code> A bool value to denote if the given data is a file path or not (default True, which denotes the given data is a file path) Example 1: the given string is not a file path <pre><code>{% query dataset=\"test\", isfilepath=False %}\n    SELECT ?s ?p ?o\n    WHERE {\n        ?s ?p ?o\n    }\n    ORDER BY ?s ?p ?o\n{% endquery %}\n</code></pre> Example 2: the given string is a file path <p><pre><code>{% query dataset=\"test\", isfilepath=True %} query_file {% endquery %}\n</code></pre> Here is the query_file's content: <pre><code>SELECT ?s ?p ?o\nWHERE {\n    ?s ?p ?o\n}\nORDER BY ?s ?p ?o\n</code></pre></p>"},{"location":"commands/report/tags/tag-table/","title":"Tag table","text":"<p>The <code>table</code> tag embed query results to HTML as a table. Here are parameters of the <code>table</code> tag:</p> Name Description <code>mappings</code> File of the mappings to shorten text (str): path of a JSON file, where the key is the original text and the value is the shorter text. <code>on</code> A column or a list of selected columns. All columns will be selected by default (None) Example: embed query results as a table <pre><code>{% table %}\n    {%- query isfilepath=False as query_results %}\n        SELECT ?s ?p ?o\n        WHERE {\n            ?s ?p ?o\n        }\n        ORDER BY ?s ?p ?o\n    {% endquery %}\n    {{ query_results }}\n{% endtable %}\n</code></pre>"},{"location":"commands/report/tags/tag-use/","title":"Tag use","text":"<p>The <code>use</code> tag can be used to define custom tags. Here is a parameter of the <code>use</code> tag:</p> Name Description <code>filepath</code> Path of a file to define custom tags <p>Here is the structure of tags to be defined within the file at the path <code>filepath</code>: <pre><code>{% template TAG_NAME PARAM1 PARAM2 %}\n    CONTENT\n{% endtemplate %}\n</code></pre> You need to update <code>TAG_NAME</code>, <code>PARAM1</code>, <code>PARAM2</code>, and <code>CONTENT</code> based on your use case. <code>TAG_NAME</code> must be unique, which means you cannot define multiple tags with the same name. You can have any number of parameters, which means <code>{% template TAG_NAME %}</code> and <code>{% template TAG_NAME PARAM1 PARAM2 PARAM3 %}</code> are also valid. Nested tags are also supported, which means you can put another tag within the <code>CONTENT</code> part.</p> Example: define <code>predicate_term</code> and <code>format_output</code> tags <ol> <li> <p>Write <code>{% use \"templates.geist\" %}</code> at the beginning of a Geist template, where you want to use the custom tags, i.e., <code>predicate_term</code> and <code>format_output</code> tags.</p> </li> <li> <p>Define custom tags in file with the path of \"templates.geist\":</p> <pre><code>{% template predicate_term %}says{% endtemplate %}\n\n{% template format_output person sent %}\n    {{ person }} {% predicate_term %} {{sent}}\n{% endtemplate %}\n</code></pre> </li> <li> <p>Use custom tags in the Geist template as other predefined tags (e.g., create)</p> <pre><code>{% use \"templates.geist\" %}\n\n{%- create inputformat=\"nt\", isfilepath=False %}\n    &lt;http://example.com/test1&gt; &lt;http://example.com/p1&gt; \"Hello World\".\n    &lt;http://example.com/test2&gt; &lt;http://example.com/p2&gt; \"What a Nice Day\".\n{% endcreate %}\n\n{%- query \"kb1\", isfilepath=False as res %}\n    SELECT ?s ?o\n    WHERE {\n        ?s ?p ?o\n    }\n    ORDER BY ?s ?o\n{% endquery %}\n{% set all_triples = res | json2df %}\n\n{% for _, row in all_triples.iterrows() %}\n    {% format_output row[\"s\"], row[\"o\"] %}.\n{%- endfor %}\n\n{%- destroy %}\n</code></pre> </li> <li> <p>Expected output:</p> <pre><code>&lt;http://example.com/test1&gt; says Hello World.\n&lt;http://example.com/test2&gt; says What a Nice Day.\n</code></pre> </li> </ol>"}]}